<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Favas on My little software warehouse</title>
    <link>http://fedepaol.github.io/fava/</link>
    <description>Recent content in Favas on My little software warehouse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://fedepaol.github.io/fava/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>an optimization story</title>
      <link>http://fedepaol.github.io/fava/2019/02/13/an-optimization-story/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2019/02/13/an-optimization-story/</guid>
      <description>There are some scenarios where the order matters Let&amp;rsquo;s say that you have an api that can receive &amp;ldquo;actions&amp;rdquo; to be performed on a given endpoint.
Think about you buying something on Amazon and then changing your mind and revoking your order. You don&amp;rsquo;t want those two actions to be swapped, otherwise the cancellation will be refused (the order you want to cancel do not exists yet) and then the item you don&amp;rsquo;t want anymore will be ordered (since the action of ordering the item receives the backend after the cancelation).</description>
    </item>
    
    <item>
      <title>fast messaging with nats and go part 2</title>
      <link>http://fedepaol.github.io/fava/2018/12/11/fast-messaging-with-nats-and-go-part-2/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2018/12/11/fast-messaging-with-nats-and-go-part-2/</guid>
      <description>This is the second of a follow up serie of the talk Fast messaging with Nats and Go I gave at golab 2018. The first part can be found here
What can we do with nats? Pub sub As you can probably guess, given that Nats is a pure pub / sub system, we can easily implement pub / sub.
{% img /images/nats/pubsub.png 350 %}
Please remember that a nats publisher does not assume the audience.</description>
    </item>
    
    <item>
      <title>fast messaging with nats and go</title>
      <link>http://fedepaol.github.io/fava/2018/10/27/fast-messaging-with-nats-and-go/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2018/10/27/fast-messaging-with-nats-and-go/</guid>
      <description>This is the first of follow up serie of the talk Fast messaging with Nats and Go I gave at golab 2018.
The slides of the talk can be found here:  What is Nats Nats is a messaging system hosted under the CNCF umbrella, which is an open source software foundation dedicated to making cloud native computing universal and sustainable. It&amp;rsquo;s my place-to-go while looking for software related to distributed systems.</description>
    </item>
    
    <item>
      <title>a new chapter</title>
      <link>http://fedepaol.github.io/fava/2018/10/26/a-new-chapter/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2018/10/26/a-new-chapter/</guid>
      <description>It&amp;rsquo;s been a while It&amp;rsquo;s more than a year since my last blogpost which incidentally (or not) it happened right a month before the birth of my second child. In the past year I lost a lot of sleep, and now I am kind of getting back to normality (which means new side gigs :-)).
My interests moved from Android and mobile in general to Go and distributed systems, which is what I am probably going to write about in the next blogpost.</description>
    </item>
    
    <item>
      <title>android okhttp and websockets</title>
      <link>http://fedepaol.github.io/fava/2017/04/30/android-okhttp-and-websockets/</link>
      <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2017/04/30/android-okhttp-and-websockets/</guid>
      <description>##Websockets Rest http calls are the most common interaction between Android apps and remote servers. However, there are some scenarios where the interaction is better handled via a persistent connection: think about a chat, or a multiplayer game where data flows in both directions and the server needs to push data to the clients and to be aware of which client are connected.
This kind of scenario can be implemented through Websockets.</description>
    </item>
    
    <item>
      <title>android mvp testing</title>
      <link>http://fedepaol.github.io/fava/2016/08/27/android-mvp-testing/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2016/08/27/android-mvp-testing/</guid>
      <description>MVP is Model View Presenter .. which is a pattern that is very popular among Android developers nowdays.
I don&amp;rsquo;t intend to write (yet) another guide about MVP in Android, because others have done a better job, for example:
 Antonio Leiva&amp;rsquo;s introduction to MVP Hannes Dorfmann&amp;rsquo;s introduction to Mosby Fernando Cejas&amp;rsquo; post on clean architecture  A lot have been said about MVP (and other similar patterns), like:</description>
    </item>
    
    <item>
      <title>how to a timer</title>
      <link>http://fedepaol.github.io/fava/2016/06/20/how-to-a-timer/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2016/06/20/how-to-a-timer/</guid>
      <description>Ok, I must confess the title is built to draw people&amp;rsquo;s attention, because you know, nowdays everything is done in a reactive fashion. RxJava is superhelpful, but if we forget the ecosystem our apps are running into, we risk to forget the proper way to implement certain tasks in Android.
Why do we need a whole post about timers? Recently, I had to implement a countdown timer in Android.</description>
    </item>
    
    <item>
      <title>happines is relative</title>
      <link>http://fedepaol.github.io/fava/2016/04/20/happines-is-relative/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2016/04/20/happines-is-relative/</guid>
      <description>Using relative layout is bad .. or at least they say so. The truth is, it is relatively easy to build complex layouts using RelativeLayouts, but this ease of use comes with a cost: in order to provide that kind of flexibility, RelativeLayout does two measurement passes.
There are a lot of talks and posts explaining that if you have nested relative layouts, you&amp;rsquo;ll end up with many measurement passes that will consume your cpu and will contribute to miss the dreaded 16 ms threshold.</description>
    </item>
    
    <item>
      <title>cached rest requests with rxjava</title>
      <link>http://fedepaol.github.io/fava/2016/01/01/cached-rest-requests-with-rxjava/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2016/01/01/cached-rest-requests-with-rxjava/</guid>
      <description>####Disclaimer: In this post I am trying to cover a proper approach to a common problem. I am still in the process of wrapping my head around RxJava so what I write here might not be the best way to solve the problem.
Cached requests with RxJava Lately I&amp;rsquo;ve been trying to develop a rest backed app using RxJava. I must admit that once you get in the proper mental mood, RxJava almost feels like cheating.</description>
    </item>
    
    <item>
      <title>testing rxjava observables subscriptions</title>
      <link>http://fedepaol.github.io/fava/2015/09/13/testing-rxjava-observables-subscriptions/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2015/09/13/testing-rxjava-observables-subscriptions/</guid>
      <description>Testing RxJava While catching up with the latest Android novelties I could not ignore RxJava, which seems to grow in popularity between android developers.
If you just heard about it, and you want to get your feet wet, I really recommend Dan Lew&amp;rsquo;s Grokking with RxJava series as a starting point.
RxJava is asynchronous by nature, so unit testing it might seem a daunting at first, especially if you use that asynchronous interaction to test stuff.</description>
    </item>
    
    <item>
      <title>mocking with robolectric and dagger 2</title>
      <link>http://fedepaol.github.io/fava/2015/09/05/mocking-with-robolectric-and-dagger-2/</link>
      <pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2015/09/05/mocking-with-robolectric-and-dagger-2/</guid>
      <description>Why robolectric I&amp;rsquo;ve been a fan of robolectric since the old days, since when Android Studio was not an option and few developers embraced IntelliJ. I left it a bit behind after the introduction of Android Studio, since its support was far from optimal.
Things have changed, and after listening Corey Latislaw advocating its usage during this fragmented podcast episode I wanted to give it a spin. Even if there is a bit of debate over its usage, mainly because tests are performed against mocked objects instead of the real framework code, it is the fastest lane to your tdd cycle because tests are run on the local jvm instead of being packed in an apk, deployed on a device and run over there.</description>
    </item>
    
    <item>
      <title>its been a while</title>
      <link>http://fedepaol.github.io/fava/2015/09/04/its-been-a-while/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2015/09/04/its-been-a-while/</guid>
      <description>###.. since my last blogpost. I&amp;rsquo;ve done a few things in the meanwhile, I wrote a game with LibGdx, I tinkered with various frameworks, but on top of all these things I&amp;rsquo;ve been taking care of my one (and a half) year old daughter.
I do certainly have less time to devote to side projects, but I still like to learn new things and Android is exciting from that point of view.</description>
    </item>
    
    <item>
      <title>dragging with viewdraghelper</title>
      <link>http://fedepaol.github.io/fava/2014/09/01/dragging-with-viewdraghelper/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2014/09/01/dragging-with-viewdraghelper/</guid>
      <description>While working on my last side gig, a patch to Firefox for Android to allow the urlbar to be dragged in order to show content hidden behind the main view, I had to deal with ViewDragHelper and understand how it works.
The final result (please note that the patch is still under review) is something like this:
{% youtube rKRIZB6nQfg %}
It caused me more than one headache, and for this reason I am writing this post hoping it might be helpful to anybody wanting to tinker with it.</description>
    </item>
    
    <item>
      <title>Generating preloaded sqlite data</title>
      <link>http://fedepaol.github.io/fava/2014-04-08-preloading-localized-data-in-sqllte/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2014-04-08-preloading-localized-data-in-sqllte/</guid>
      <description>Preloading data in Sqlite is a common problem during android development.
The most common solutions are:
hardcode the insert statements and execute them (possibly inside a transaction) the first time the db is openedplace the data inside a csv file, load it the first time the db gets opened, parse the rows and populate the dbprepare a pre-built sqlite file, ship it along with your app and load it the first time the db is opened</description>
    </item>
    
    <item>
      <title>Rest interaction in Android </title>
      <link>http://fedepaol.github.io/fava/2014-02-20-rest-interaction-in-android/</link>
      <pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2014-02-20-rest-interaction-in-android/</guid>
      <description>In last December (&#39;13) I was asked to submit a talk proposal for the first Italian Droidcon, which I did. It got accepted, so in Febraury I gave my first public speech speaking of &#34;(O)Authenticated Rest Interaction in Android&#34; in front of real people. This post is meant to be a follow up with the information that can&#39;t be found in the slides
 I hoped to sum all the talk up in a post, but it got too long so I am going to split it in several pieces.</description>
    </item>
    
    <item>
      <title>Contributing to Firefox for Android</title>
      <link>http://fedepaol.github.io/fava/2013-07-29-contributing-to-firefox-for-android/</link>
      <pubDate>Mon, 29 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2013-07-29-contributing-to-firefox-for-android/</guid>
      <description>In the past two / three years I have been (mostly) developing Android code, even before it was cool(tm), as a way to do something different from what I do during my day time job.
I wrote some apps, a couple of libraries, and some 80% finished projects I really hope I will finish some day.
Recently I thought that joining some big android related open source project could have been interesting, and I went for them.</description>
    </item>
    
    <item>
      <title>PostMan (RingsTwice) Reloaded - Android rest and oauth make easy(er) </title>
      <link>http://fedepaol.github.io/fava/2013-03-06-postman-ringstwice-reloaded-android/</link>
      <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2013-03-06-postman-ringstwice-reloaded-android/</guid>
      <description>Android and RestMy PostManLib android library had a quite troubled genesis. Some infos can be found in this old post&amp;nbsp;, but bear in mind that I only kept the skeleton of what I wrote at that time (which, by the way, was inspired by&amp;nbsp;this&amp;nbsp;talk).
The api was (to be kind) a bit clunky, and I recently chose to rewrite / finish it. Apart from its clunkyness, one thing was missing:</description>
    </item>
    
    <item>
      <title>DroidAlone - reloaded</title>
      <link>http://fedepaol.github.io/fava/2012-11-25-droidalone-reloaded/</link>
      <pubDate>Sun, 25 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2012-11-25-droidalone-reloaded/</guid>
      <description>Whenever I speak with another android developer, the occasional chat goes to &#34;what did you develop?&#34; question.
Last time it happened at droidcon uk, and for the first time I felt something wasn&#39;t completely right when I showed my DroidAlone app.
DroidAlone is a useful app (so they say) that comes into play whenever you forget your phone at home. With a simple sms protected by a password choosen by the user, it can be activated.</description>
    </item>
    
    <item>
      <title>Android Content Providers Generator</title>
      <link>http://fedepaol.github.io/fava/2012-11-11-android-content-providers-generator/</link>
      <pubDate>Sun, 11 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2012-11-11-android-content-providers-generator/</guid>
      <description>During the refactoring of my two years old app DroidAlone, I decided to try to access to the storage through a ContentProvider.
Even if the official documentation warns that there is no need to use content providers if your app does not want to export it&#39;s data against other apps, there are a bunch of advantages in using a content provider in your app.
The main and more obvious advantage is that you can use a Loader with your data.</description>
    </item>
    
    <item>
      <title>DroidconUk 2012</title>
      <link>http://fedepaol.github.io/fava/2012-10-29-droidconuk-2012/</link>
      <pubDate>Mon, 29 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2012-10-29-droidconuk-2012/</guid>
      <description>Here I am, back again from my third DroidconUk experience.

I can still remember explaining to my non tech friends what Android was the evening of the 1st droidcon, and since then it became a sort of ritual, a couple of days when I can take some rest from my day time job and take part to the community of some of the best android developers coming from all over the Europe.</description>
    </item>
    
    <item>
      <title>Gridlayout support library with maven</title>
      <link>http://fedepaol.github.io/fava/2012-09-15-gridlayout-support-library-with-maven/</link>
      <pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2012-09-15-gridlayout-support-library-with-maven/</guid>
      <description>EDIT 17/10/2012:
Gridlayout support is now working natively with maven android deployer. I strongly suggest to use it instead of my method.
---------------------------

Gridlayout has been introduced since api level 14, and is being suggested layout as a more efficient alternative over nested linear layouts and relative layout.
It has also been recently added as part of the android support library, in order to have it available on older devices.</description>
    </item>
    
    <item>
      <title>Intellij, Robolectric and Android</title>
      <link>http://fedepaol.github.io/fava/2012-07-23-intellij-robolectric-and-android/</link>
      <pubDate>Mon, 23 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2012-07-23-intellij-robolectric-and-android/</guid>
      <description>I have been curious about intellij since droicon uk 2011, where I noticed that some of the speakers were using IntelliJ instead of eclipse.
A post from Richard Hyndman, who is a developer advocate from Google, was the final straw that pushed me to download IntelliJ and give it a try.
The first thing an eclipse user will notice in intellij is how slick and fast compares to the behemoth which is eclipse.</description>
    </item>
    
    <item>
      <title>Tcp connections in Android</title>
      <link>http://fedepaol.github.io/fava/2012-05-01-tcp-connections-in-android/</link>
      <pubDate>Tue, 01 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2012-05-01-tcp-connections-in-android/</guid>
      <description>Or how to keep your app connected and stop worrying.&amp;nbsp;
Disclaimer:
This is not another place where you can find java code snippet to open a socket and read and write to some server.
If you need that, go back to your favorite search engine and look for another result. But be careful: while looking for &#34;inspiration&#34; I found a lot of examples where the connection was held inside the UI thread.</description>
    </item>
    
    <item>
      <title>PostmanLib - Android and Rest Web Services</title>
      <link>http://fedepaol.github.io/fava/2012-01-30-postmanlib-android-and-rest-web/</link>
      <pubDate>Mon, 30 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2012-01-30-postmanlib-android-and-rest-web/</guid>
      <description>Edit 2013-03-10: I&#39;ve performed a substancial refactoring of postmanlib, and the details can be found in this new post
With the development of MyDearSanta app, I needed to fetch and put some data to a rest service developed using django python framework with a simple set of json based rest apis.
The development of the interaction between android and the rest web service was a bit messy because I was in hurry to release the app before Christmas (giving it&#39;s xmas related nature), but while developing it I thought it could have been a good start for my first android library.</description>
    </item>
    
    <item>
      <title>Pastimer - Android Kitchen Timer (Released)</title>
      <link>http://fedepaol.github.io/fava/2012-01-22-pastimer-android-kitchen-timer-released/</link>
      <pubDate>Sun, 22 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2012-01-22-pastimer-android-kitchen-timer-released/</guid>
      <description> Pastimer, my barcode based kitchen timer is now on the market.
The basic idea is to scan the barcode on the box to set the time.

The url to download it from the market is
https://market.android.com/details?id=com.whiterabbit.pastimer
or this for the lite version
https://market.android.com/details?id=com.whiterabbit.pastimer.lite
The description of the product can be found here&amp;nbsp;Android Kitchen Timer </description>
    </item>
    
    <item>
      <title>MyDearSanta</title>
      <link>http://fedepaol.github.io/fava/2011-12-05-mydearsanta/</link>
      <pubDate>Mon, 05 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2011-12-05-mydearsanta/</guid>
      <description>This time, while PastTimer has not been released yet, I started an experiment with an old friend. We wanted not just to release another standalone app, but interact in some way with a backend.
The result is&amp;nbsp;www.mydearsanta.info&amp;nbsp;, a web based Christmas list, which comes together with and Android app&amp;nbsp;https://market.android.com/details?id=com.smokingbytes.santas&amp;nbsp;and an Iphone app (currently under the approval process) .
The backend was written using the Django framework, and the apps interact with it using a json based rest api.</description>
    </item>
    
    <item>
      <title>A new app - Android Kitchen Timer</title>
      <link>http://fedepaol.github.io/fava/2011-10-18-new-app-android-kitchen-timer/</link>
      <pubDate>Tue, 18 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2011-10-18-new-app-android-kitchen-timer/</guid>
      <description>Pastimer is my 4th app. It&#39;s a simple (but nice) Android Kitchen Timer based on barcode scanning.
I learned some things during my journey of android development, but this time I wanted to focus on user interface and ease of use.
As always, it starts as a simple idea, the you start putting some code in it, it&#39;s &#34;almost&#34; working, and the difference between almost working and finished, is something like two months or more.</description>
    </item>
    
    <item>
      <title>What I have been working on.. Android Kitchen Timer</title>
      <link>http://fedepaol.github.io/fava/2011-06-24-what-i-have-been-working-on/</link>
      <pubDate>Fri, 24 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2011-06-24-what-i-have-been-working-on/</guid>
      <description>Apart from some rest, and reading some good books (like excellent Kent Beck&#39;s Test Driven development by example, and &#34;growing object-oriented software guided by tests&#34;), I have been working on a new app in the last month or so.
A week end locked at home because my gf was ill, was a good excuse to start a deep programming session. The app I am about to release (well, to be honest it still lacks all the nice ui parts, it just look like a bunch of grey buttons thrown on the screen) solves (or at least tries to simplify) a problem I have every time I need to cook pasta.</description>
    </item>
    
    <item>
      <title>Behind activities: android, services, background operations and threads</title>
      <link>http://fedepaol.github.io/fava/2011-04-25-behind-activities-android-services/</link>
      <pubDate>Mon, 25 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2011-04-25-behind-activities-android-services/</guid>
      <description>This time I want to share something I learned about working in background on android.
One of the biggest advantages of android over ios (or, at least, some ios version ago) is that your app is not sandboxed and can continue to live in background.
To perform background (not visible) work, all you need to know is how to use android services.
A service is a piece of an application that is allowed to be active even if the application is not in foreground anymore.</description>
    </item>
    
    <item>
      <title>first 18 days of pegdroid</title>
      <link>http://fedepaol.github.io/fava/2011-03-21-first-18-days-of-pegdroid/</link>
      <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2011-03-21-first-18-days-of-pegdroid/</guid>
      <description>It&#39;s already been 18 days, and it&#39;s time to make some considerations.
For those who don&#39;t know what pegdroid is, it&#39;s a simple peg solitaire for android. I released it 18 days ago, it&#39;s free and it&#39;s basically ad-supported (but I don&#39;t get much from that).
I integrated google analytics in my app, so I can get some help from the statistics I get every day. In the meanwhile, the market dashboard got updated and I also can see which kind of device are the most popular.</description>
    </item>
    
    <item>
      <title>PegDroid - Android simple game</title>
      <link>http://fedepaol.github.io/fava/2011-03-03-pegdroid/</link>
      <pubDate>Thu, 03 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2011-03-03-pegdroid/</guid>
      <description>I just released a new game. It&#39;s (yet another) version of the popular solitaire game. I thought its name was &#34;Chinese checkers&#34;, but it looks like it&#39;s most common name is &#34;Peg&#34;. Anyway, it didn&#39;t take (too) much to develop it, I really enjoyed learning something about the powerful andengine framework, but I am still proceeding at a slow pace since I can work on android only after my daytime job.</description>
    </item>
    
    <item>
      <title>Mobile game development</title>
      <link>http://fedepaol.github.io/fava/2011-02-18-mobile-game-development/</link>
      <pubDate>Fri, 18 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2011-02-18-mobile-game-development/</guid>
      <description>Another thing I always wanted to do was game programming. Moving objects and interacting with the game, as well as having fun with them, gives great satisfaction.
I think the fun part is that you have immediate feedback of what is happening, it&#39;s just not like filling an edit text and pressing a button (or server side programming).
Given that I am spending much of my spare time in (trying to) learning mobile development, I tried to merge the two things, and I came across to andengine framework.</description>
    </item>
    
    <item>
      <title>Why I do like developing mobile</title>
      <link>http://fedepaol.github.io/fava/2011-01-13-why-i-do-like-developing-mobile/</link>
      <pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2011-01-13-why-i-do-like-developing-mobile/</guid>
      <description>Well, I stopped and started thinking what&#39;s so cool about mobile development and mobile apps, and I would like to share my thoughts.
Before modern smartphones, most software was written to be consumed in desktop environment, where the user was sitting in front of his computer interacting with it.
Smartphones make now easy doing something new: interacting with the environment the user belongs to. That is what I think is the most exciting thing of mobile dev.</description>
    </item>
    
    <item>
      <title>DroidAlone - Opensourced</title>
      <link>http://fedepaol.github.io/fava/2010-12-27-droidalone-opensourced/</link>
      <pubDate>Mon, 27 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2010-12-27-droidalone-opensourced/</guid>
      <description>I released DroidAlone on the market in the early summer. You can find a description at the following url&amp;nbsp;DroidAlone - Missed call for Android
It is a paid app, and it costs something like 0.99 euros. It has been downloaded something like 150 times since then.
I also had some issues in choosing its name: at first it was homealone, but I was afraid to Mr Culkin knokin&#39; to my door for royalties, then it was phonealone but there was already one, and then it moved to DroidAlone.</description>
    </item>
    
    <item>
      <title>The importance of little details</title>
      <link>http://fedepaol.github.io/fava/2010-12-08-importance-of-being-polished/</link>
      <pubDate>Wed, 08 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2010-12-08-importance-of-being-polished/</guid>
      <description>This won&#39;t be a strictly technical post, but something related to some of my impressions during android development.
I read a lot of stuff about android, and how at first it looks so easy to deploy an android application.
What I realized in the last year is that releasing something that &#34;almost&#34; work is not enough. Your app will be buried under bad reviews and, since android does not make any filter on app quality, it will just be one of the many apps out there or, even worse, it will be under below of the apps out there.</description>
    </item>
    
    <item>
      <title>Testing an intent service</title>
      <link>http://fedepaol.github.io/fava/2010-11-25-testing-intent-service/</link>
      <pubDate>Thu, 25 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2010-11-25-testing-intent-service/</guid>
      <description>It may sound weird, but I discovered java development while trying to learn android development itself.
Along with Java, eclipse and all this nice stuff, I discovered junit too.
One of the problems I encountered while developing my second app, droidalone, was to test intent services.
Intent services are a powerful way to handle background task. They basically are services that run in their own thread and die (like non sticky services) after they finished their job.</description>
    </item>
    
    <item>
      <title>My sqllite helper builder</title>
      <link>http://fedepaol.github.io/fava/2010-11-18-my-sqllite-helper-builder/</link>
      <pubDate>Thu, 18 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2010-11-18-my-sqllite-helper-builder/</guid>
      <description>EDIT 11/11/2012: as described in this new blog post, I modified the script to generate a content provider as well
This is my first post about something related to android.
Just to break the ice, I would like to introduce a simple helper script I developed this summer.
Android ships with a very nice local storage, which is sqllite. It&#39;s said almost everywhere that, in order to make your life easier, you should develop an helper class.</description>
    </item>
    
    <item>
      <title>Something more about me...</title>
      <link>http://fedepaol.github.io/fava/2010-11-10-something-more-about-me/</link>
      <pubDate>Wed, 10 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2010-11-10-something-more-about-me/</guid>
      <description>Well, maintaining a blog looks harder than I thought, but this is another attempt to keep it alive.
I&#39;ll say something more about me, just to break the ice: I live in Italy, I am a software engineer, and my current employer is a company whose main products are related to finance.
I&#39;m currently working to maintain and to evolve the brokerage platform of one major italian bank. After developing it&#39;s main core components, I had the honor (?</description>
    </item>
    
    <item>
      <title>It&#39;s been a long time...</title>
      <link>http://fedepaol.github.io/fava/2010-07-06-its-been-long-time/</link>
      <pubDate>Tue, 06 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2010-07-06-its-been-long-time/</guid>
      <description>A lot of things have changed since my last post, but some are still the same.
One of them is my curiosity and my passion for technologies.
Why I am back here? Because I am trying to understand and develop some applications with Android framework, and I think it would be useful for me to have a place where collect the new things I learn. At the same time I hope these things will be useful for somebody out there.</description>
    </item>
    
    <item>
      <title>Developing python on symbian from a linux box</title>
      <link>http://fedepaol.github.io/fava/2008-06-10-developing-python-on-symbian-from-linux/</link>
      <pubDate>Tue, 10 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2008-06-10-developing-python-on-symbian-from-linux/</guid>
      <description>Since my mobile device is a s60v3 one (Nokia E61), I found particulary difficult to develop any simple python script on the phone. The hardest thing to do was the write - test cycle.
On linux you can&#39;t simply send the file to the phone with obex, since it will be stored in your incoming messages.
From the excellentJürgen Scheible&#39;s tutorial website I discovered the existance of the nice putools for making easier the development cycle here</description>
    </item>
    
    <item>
      <title>Why this blog</title>
      <link>http://fedepaol.github.io/fava/2008-06-10-why-this-blog/</link>
      <pubDate>Tue, 10 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2008-06-10-why-this-blog/</guid>
      <description> I often try to do something with various tech stuff. I thought that this could be a nice place to share my experiences with others, and also a good place to write everything I will need in the future.
At the moment I am trying to work on a little project using python interpreter for symbian applications..... </description>
    </item>
    
  </channel>
</rss>