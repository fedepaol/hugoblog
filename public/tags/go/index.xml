<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on My little software warehouse</title>
    <link>https://fedepaol.github.io/tags/go/</link>
    <description>Recent content in Go on My little software warehouse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 13 Oct 2023 15:41:18 +0200</lastBuildDate>
    <atom:link href="https://fedepaol.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>eBPF journey by examples: hijacking SSL with eBPF with eCapture</title>
      <link>https://fedepaol.github.io/blog/2023/10/13/ebpf-journey-by-examples-hijacking-ssl-with-ebpf-with-ecapture/</link>
      <pubDate>Fri, 13 Oct 2023 15:41:18 +0200</pubDate>
      <guid>https://fedepaol.github.io/blog/2023/10/13/ebpf-journey-by-examples-hijacking-ssl-with-ebpf-with-ecapture/</guid>
      <description>ECapture Link to heading Uprobes (user probes) and uretprobes are a way to attach an eBPF program to a user space application, specifically to the entry or exit point of a given function. By doing so, the program is able to get notified whenever a given function is called, and with which arguments. This information is often used to notify the user space side of the eBPF program, that handles it to serve the purpouse of the application.</description>
    </item>
  </channel>
</rss>
