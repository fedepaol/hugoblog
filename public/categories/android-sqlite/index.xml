<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android Sqlite on My little software warehouse</title>
    <link>http://fedepaol.github.io/categories/android-sqlite/</link>
    <description>Recent content in Android Sqlite on My little software warehouse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://fedepaol.github.io/categories/android-sqlite/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generating preloaded sqlite data</title>
      <link>http://fedepaol.github.io/fava/2014-04-08-preloading-localized-data-in-sqllte/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/fava/2014-04-08-preloading-localized-data-in-sqllte/</guid>
      <description>Preloading data in Sqlite is a common problem during android development.
The most common solutions are:
hardcode the insert statements and execute them (possibly inside a transaction) the first time the db is openedplace the data inside a csv file, load it the first time the db gets opened, parse the rows and populate the dbprepare a pre-built sqlite file, ship it along with your app and load it the first time the db is opened</description>
    </item>
    
    <item>
      <title>Generating preloaded sqlite data</title>
      <link>http://fedepaol.github.io/posts/2014-04-08-preloading-localized-data-in-sqllte/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fedepaol.github.io/posts/2014-04-08-preloading-localized-data-in-sqllte/</guid>
      <description>Preloading data in Sqlite is a common problem during android development.
The most common solutions are:
hardcode the insert statements and execute them (possibly inside a transaction) the first time the db is openedplace the data inside a csv file, load it the first time the db gets opened, parse the rows and populate the dbprepare a pre-built sqlite file, ship it along with your app and load it the first time the db is opened</description>
    </item>
    
  </channel>
</rss>